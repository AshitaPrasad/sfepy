#!/usr/bin/python
# 04.10.2005
# last revision: 03.09.2007
import sys
import os.path as op

if (len( sys.argv ) == 3):
    fileNameIn = sys.argv[1];
    fileNameOut = sys.argv[2];
else:
    print 'Usage: ', sys.argv[0], 'file.mesh file.vtk'
    sys.exit()

if (fileNameIn == '-'):
    fileIn = sys.stdin
else:
    fileIn = open( fileNameIn, "r" ); 

if (fileNameOut == '-'):
    fileOut = sys.stdout
else:
    fileOut = open( fileNameOut, "w" ); 

fileOut.write( r"""# vtk DataFile Version 2.0
generated by %s
ASCII
DATASET UNSTRUCTURED_GRID
""" % op.basename( sys.argv[0] ) )

##
# 1. pass.
nNod = 0
nEls = {'Edges' : 0, 'Quadrilaterals' : 0, 'Triangles' : 0,
        'Tetrahedra' : 0, 'Hexahedra' : 0 }
sizes = {'Edges' : 3, 'Quadrilaterals' : 5, 'Triangles' : 4,
         'Tetrahedra' : 5, 'Hexahedra' : 9 }
cellTypes = {'Edges' : 3, 'Quadrilaterals' : 9, 'Triangles' : 5,
             'Tetrahedra' : 10, 'Hexahedra' : 12 }

keys = nEls.keys()
while 1:
    line = fileIn.readline().split()
    if not len( line ):
        break
    elif (line[0] == 'Dimension'):
        if len( line ) == 2:
            dim = int( line[1] )
        else:
            dim = int( fileIn.readline() )
    elif (line[0] == 'Vertices'):
        nNod = int( fileIn.readline() )
    elif (line[0] in keys):
        nEls[line[0]] += int( fileIn.readline() )

nEl = sum( nEls.values() )
totalSize = sum( [sizes[ii] * nEls[ii] for ii in nEls.keys()] )

#print nNod, nEl, nEls, totalSize

if (fileNameIn != '-'):
    fileIn.close()
    fileIn = open( fileNameIn, "r" ); 

endNodeLine = (3 - dim) * '0.0 ' + '\n'

##
# 2. pass.
canCells = 0
ct = []
matIds = []
while 1:
    line = fileIn.readline().split()
    if not len( line ):
        break
    elif (line[0] == 'Vertices'):
        nNod = int( fileIn.readline() )
        fileOut.write( 'POINTS %d float\n' % nNod )
        for ii in range( nNod ):
            line = fileIn.readline().split()
            line[-1] = endNodeLine
            fileOut.write( ' '.join( line ) )

        fileOut.write( 'CELLS %d %d\n' % (nEl, totalSize) )
        canCells = 1
    elif (line[0] in keys):
        if not canCells:
            raise IOError

        nn = int( fileIn.readline() )
        ct += [cellTypes[line[0]]] * nn
        size = [str( sizes[line[0]] - 1 )]
        for ii in range( nn ):
            line = fileIn.readline().split()
            matIds.append( line[-1] )
            aux = [str( int( ii ) - 1) for ii in line[:-1]] + ['\n']
            fileOut.write( ' '.join( size + aux ) )

fileOut.write( 'CELL_TYPES %d\n' % nEl )
fileOut.write( ''.join( ['%d\n' % ii for ii in ct] ) )

fileOut.write( 'CELL_DATA %d\n' % nEl )
fileOut.write( '\nSCALARS matId float 1\n' )
fileOut.write( 'LOOKUP_TABLE default\n' )
for row in matIds:
    fileOut.write( '%s\n' % row )

if (fileNameIn != '-'):
    fileIn.close()
if (fileNameOut != '-'):
    fileOut.close()
