"""

`quadrature_tables` are organized as follows::

    quadrature_tables = {
        '<geometry1>' : {
            order1 : QuadraturePoints(args1),
            order2 : QuadraturePoints(args2),
            ...
        },
        '<geometry2>' : {
            order1 : QuadraturePoints(args1),
            order2 : QuadraturePoints(args2),
            ...
        },
        ...
    }

Naming conventions in problem description files::

    `<family>_<order>_<dimension>`

Integral 'family' is just an arbitrary name given by user.

Examples
--------
* gauss_o2_d2 # second order, 2D
* gauss_o1_d3 # first order, 3D
* my_int_o1_d3 # same as above
"""
from sfepy.base.base import *

class QuadraturePoints(Struct):
    """
    Representation of a set of quadrature points.

    Parameters
    ----------
    data : array_like
        The array of shape `(n_point, dim + 1)` of quadrature point
        coordinates (first `dim` columns) and weights (the last column). 
    coors : array_like, optional
        Optionally, instead of using `data`, the coordinates and weights can
        be provided separately - `data` are then ignored.
    weights : array_like, optional
        Optionally, instead of using `data`, the coordinates and weights can
        be provided separately - `data` are then ignored.
    bounds : (float, float), optional
        The coordinates and weights should correspond to a reference
        element in `[0, 1]` x `dim`. Provide the correct bounds if this is
        not the case.
    tp_fix : float, optional
        The value that is used to multiply the tensor product element
        volume (= 1.0) to get the correct volume.
    """

    def __init__(self, data, coors=None, weights=None, bounds=None, tp_fix=1.0):
        if coors is None:
            data = nm.array(data, dtype=nm.float64, ndmin=2)
            self.coors = data[:,:-1].copy()
            self.weights = data[:,-1].copy()

        elif weights is not None:
            self.coors = nm.array(coors, dtype=nm.float64, ndmin=2)
            self.weights = nm.array(weights, dtype=nm.float64)

        else:
            raise ValueError('both "coors" and "weights" have to be provided!')

        self.n_point, self.dim = self.coors.shape

        self.bounds = (0, 1)
        bbox = nm.array([self.bounds] * self.dim, dtype=nm.float64)
        self.volume = nm.prod(bbox.sum(axis=1)) * tp_fix

        if bounds is not None:
            # Transform from given bounds to self.bounds.
            bbox = nm.array([bounds] * self.dim, dtype=nm.float64)
            volume = nm.prod(nm.diff(bbox, axis=1)) * tp_fix

            a, b = bounds
            c, d = self.bounds

            c1 = (d - c) / (b - a)
            c2 = ((b * c) - (a * d)) / (b - a)

            self.coors = c1 * self.coors + c2
            self.weights *= self.volume / volume

_QP = QuadraturePoints
quadrature_tables = {
    '1_2' : {
        1 : _QP( [0.5,                  1.0                ]),
        3 : _QP([[-0.57735026918962584, 1.0                ],
                 [ 0.57735026918962584, 1.0                ]], bounds=(-1.0, 1.0)),
        5 : _QP([[-0.7745966692414834,  0.55555555555555558],
                 [ 0.0,                 0.88888888888888884],
                 [ 0.7745966692414834,  0.55555555555555558]], bounds=(-1.0, 1.0)),
        7 : _QP([[-0.86113631159405257, 0.34785484513745385],
                 [-0.33998104358485631, 0.65214515486254609],
                 [ 0.33998104358485631, 0.65214515486254609],
                 [ 0.86113631159405257, 0.34785484513745385]], bounds=(-1.0, 1.0)),
        9 : _QP([[-0.90617984593866396, 0.23692688505618903],
                 [-0.538469310105683  , 0.47862867049936647],
                 [ 0.0                , 0.56888888888888889],
                 [ 0.538469310105683  , 0.47862867049936647],
                 [ 0.90617984593866396, 0.23692688505618903]], bounds=(-1.0, 1.0)),
       11 : _QP([[-0.932469514203152  , 0.171324492379170  ],
                 [-0.661209386466265  , 0.360761573048139  ],
                 [-0.238619186083197  , 0.467913934572691  ],
                 [ 0.238619186083197  , 0.467913934572691  ],
                 [ 0.661209386466265  , 0.360761573048139  ],
                 [ 0.932469514203152  , 0.171324492379170  ]], bounds=(-1.0, 1.0)),
       13 : _QP([[-0.949107912342759  , 0.129484966168870  ],
                 [-0.741531185599394  , 0.279705391489277  ],
                 [-0.405845151377397  , 0.381830050505119  ],
                 [ 0.0                , 0.417959183673469  ],
                 [ 0.405845151377397  , 0.381830050505119  ],
                 [ 0.741531185599394  , 0.279705391489277  ],
                 [ 0.949107912342759  , 0.129484966168870  ]], bounds=(-1.0, 1.0)),
    },
    '2_3' : {
        1 : _QP([[ 0.33333333333333333 , 0.33333333333333333 ,  0.5                 ]], tp_fix=0.5),
        2 : _QP([[ 0.16666666666666666 , 0.16666666666666666 ,  0.16666666666666666 ],
                 [ 0.66666666666666666 , 0.16666666666666666 ,  0.16666666666666666 ],
                 [ 0.16666666666666666 , 0.66666666666666666 ,  0.16666666666666666 ]], tp_fix=0.5),
        3 : _QP([[ 0.33333333333333333 , 0.33333333333333333 , -0.28125             ],
                 [ 0.2                 , 0.2                 ,  0.26041666666666669 ],
                 [ 0.59999999999999998 , 0.2                 ,  0.26041666666666669 ],
                 [ 0.2                 , 0.59999999999999998 ,  0.26041666666666669 ]], tp_fix=0.5),
        4 : _QP([[ 0.445948490915965   , 0.445948490915965   ,  0.111690794839005   ],
                 [ 0.10810301816807    , 0.445948490915965   ,  0.111690794839005   ],
                 [ 0.445948490915965   , 0.10810301816807    ,  0.111690794839005   ],
                 [ 0.091576213509771   , 0.091576213509771   ,  0.054975871827661   ],
                 [ 0.81684757298045796 , 0.091576213509771   ,  0.054975871827661   ],
                 [ 0.091576213509771   , 0.81684757298045796 ,  0.054975871827661   ]], tp_fix=0.5),
        5 : _QP([[ 0.33333333333333333 , 0.33333333333333333 ,  0.1125              ],
                 [ 0.47014206410511505 , 0.47014206410511505 ,  0.066197076394253082],
                 [ 0.059715871789769892, 0.47014206410511505 ,  0.066197076394253082],
                 [ 0.47014206410511505 , 0.059715871789769892,  0.066197076394253082],
                 [ 0.10128650732345634 , 0.10128650732345634 ,  0.062969590272413598],
                 [ 0.79742698535308731 , 0.10128650732345634 ,  0.062969590272413598],
                 [ 0.10128650732345634 , 0.79742698535308731 ,  0.062969590272413598]], tp_fix=0.5),
        6 : _QP([[ 0.063089014491502   , 0.063089014491502   ,  0.025422453185103   ],
                 [ 0.87382197101699599 , 0.063089014491502   ,  0.025422453185103   ],
                 [ 0.063089014491502   , 0.87382197101699599 ,  0.025422453185103   ],
                 [ 0.249286745170910   , 0.249286745170910   ,  0.058393137863189   ],
                 [ 0.50142650965818003 , 0.249286745170910   ,  0.058393137863189   ],
                 [ 0.249286745170910   , 0.50142650965818003 ,  0.058393137863189   ],
                 [ 0.310352451033785   , 0.053145049844816   ,  0.041425537809187   ],
                 [ 0.053145049844816   , 0.310352451033785   ,  0.041425537809187   ],
                 [ 0.636502499121399   , 0.310352451033785   ,  0.041425537809187   ],
                 [ 0.636502499121399   , 0.053145049844816   ,  0.041425537809187   ],
                 [ 0.310352451033785   , 0.636502499121399   ,  0.041425537809187   ],
                 [ 0.053145049844816   , 0.636502499121399   ,  0.041425537809187   ]], tp_fix=0.5),
    },
    '2_4' : {
        2 : _QP([[ 0.81649658092772603, 0.0                , 1.3333333333333333 ],
                 [-0.40824829046386307, 0.70710678118654746, 1.3333333333333333 ],
                 [-0.40824829046386307,-0.70710678118654746, 1.3333333333333333 ]], bounds=(-1.0, 1.0)),
        3 : _QP([[-0.57735026918962584,-0.57735026918962584, 1.0                ],
                 [ 0.57735026918962584,-0.57735026918962584, 1.0                ],
                 [ 0.57735026918962584, 0.57735026918962584, 1.0                ],
                 [-0.57735026918962584, 0.57735026918962584, 1.0                ]], bounds=(-1.0, 1.0)),
        5 : _QP([[ 0.0                , 0.0                , 1.1428571428571428 ],
                 [ 0.0                ,-0.96609178307929588, 0.31746031746031744],
                 [ 0.0                , 0.96609178307929588, 0.31746031746031744],
                 [-0.7745966692414834 ,-0.7745966692414834 , 0.55555555555555558],
                 [-0.7745966692414834 , 0.7745966692414834 , 0.55555555555555558],
                 [ 0.7745966692414834 ,-0.7745966692414834 , 0.55555555555555558],
                 [ 0.7745966692414834 , 0.7745966692414834 , 0.55555555555555558]], bounds=(-1.0, 1.0)),
    },
    '3_4' : {
        1 : _QP([[0.25               , 0.25               , 0.25               , 0.16666666666666666 ]], tp_fix=0.16666666666666666),
        2 : _QP([[0.1381966011250105 , 0.1381966011250105 , 0.1381966011250105 , 0.041666666666666664],
                 [0.58541019662496852, 0.1381966011250105 , 0.1381966011250105 , 0.041666666666666664],
                 [0.1381966011250105 , 0.58541019662496852, 0.1381966011250105 , 0.041666666666666664],
                 [0.1381966011250105 , 0.1381966011250105 , 0.58541019662496852, 0.041666666666666664]], tp_fix=0.16666666666666666),
        3 : _QP([[0.25               , 0.25               , 0.25               ,-0.13333333333333333 ],
                 [0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.075               ],
                 [0.5                , 0.16666666666666666, 0.16666666666666666, 0.075               ],
                 [0.16666666666666666, 0.5                , 0.16666666666666666, 0.075               ],
                 [0.16666666666666666, 0.16666666666666666, 0.5                , 0.075               ]], tp_fix=0.16666666666666666),
    },
    '3_8' : {
        2 : _QP([[ 0.0                , 0.81649658092772603,-0.57735026918962584, 2.0                ],
                 [ 0.0                ,-0.81649658092772603,-0.57735026918962584, 2.0                ],
                 [ 0.81649658092772603, 0.0                , 0.57735026918962584, 2.0                ],
                 [-0.81649658092772603, 0.0                , 0.57735026918962584, 2.0                ]], bounds=(-1.0, 1.0)),
        3 : _QP([[-1.0                , 0.0                , 0.0                , 1.3333333333333333 ],
                 [ 1.0                , 0.0                , 0.0                , 1.3333333333333333 ],
                 [ 0.0                ,-1.0                , 0.0                , 1.3333333333333333 ],
                 [ 0.0                , 1.0                , 0.0                , 1.3333333333333333 ],
                 [ 0.0                , 0.0                ,-1.0                , 1.3333333333333333 ],
                 [ 0.0                , 0.0                , 1.0                , 1.3333333333333333 ]], bounds=(-1.0, 1.0)),
        5 : _QP([[-0.79582242575422146, 0.0                , 0.0                , 0.88642659279778391],
                 [ 0.79582242575422146, 0.0                , 0.0                , 0.88642659279778391],
                 [ 0.0                ,-0.79582242575422146, 0.0                , 0.88642659279778391],
                 [ 0.0                , 0.79582242575422146, 0.0                , 0.88642659279778391],
                 [ 0.0                , 0.0                ,-0.79582242575422146, 0.88642659279778391],
                 [ 0.0                , 0.0                , 0.79582242575422146, 0.88642659279778391],
                 [ 0.75878691063932813, 0.75878691063932813, 0.75878691063932813, 0.33518005540166207],
                 [ 0.75878691063932813, 0.75878691063932813,-0.75878691063932813, 0.33518005540166207],
                 [ 0.75878691063932813,-0.75878691063932813, 0.75878691063932813, 0.33518005540166207],
                 [ 0.75878691063932813,-0.75878691063932813,-0.75878691063932813, 0.33518005540166207],
                 [-0.75878691063932813, 0.75878691063932813, 0.75878691063932813, 0.33518005540166207],
                 [-0.75878691063932813, 0.75878691063932813,-0.75878691063932813, 0.33518005540166207],
                 [-0.75878691063932813,-0.75878691063932813, 0.75878691063932813, 0.33518005540166207],
                 [-0.75878691063932813,-0.75878691063932813,-0.75878691063932813, 0.33518005540166207]], bounds=(-1.0, 1.0)),
    },
}
del _QP
