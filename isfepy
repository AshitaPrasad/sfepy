#!/usr/bin/python
"""Python shell for SfePy.

   This is just a normal Python shell (IPython shell if you have the
   IPython package installed),  that executes the following commands
   for the user:

       >>> from sfepy.base.base import *
       >>> from sfepy.fem import *
       >>> from sfepy.applications import pde_solve
       >>> from sfepy.postprocess import Viewer

   So starting 'isfepy' is roughly (*) equivalent to starting Python (or
   IPython) and executing the above commands by hand. It is intended for easy
   and quick experimentation with SfePy.

   (*) Advantages of using isfepy instead of IPython directly are:
       - all SfePy messages are logged into ~/.sfepy/isfepy.log;
       - it is possible to silence the messages printed on screen.

   COMMAND LINE OPTIONS
   --------------------

   -c CONSOLE, --console=CONSOLE

     Use the specified Python or IPython shell as console backend instead
     of the default one (IPython if present or Python otherwise), e.g.:

        isfepy -c python

   -q, --quiet

     Print only Python's and SfePy's versions to stdout at startup.

   -s, --silent

     Silence the messages printed to screen.

   -- IPython's options

     Additionally you can pass command line options directly to IPython
     interpreter (standard Python shell is not supported).  However you
     need to add '--' separator between two types of options. To run
     SfePy without startup banner and colors, for example, issue:

        isfepy -q -- -colors NoColor

"""
import os, sys
from optparse import OptionParser

import sfepy
from sfepy.interactive import init_session

startup_message = """\
These commands were executed:
>>> from sfepy.base.base import *
>>> from sfepy.fem import *
>>> from sfepy.applications import pde_solve
>>> from sfepy.postprocess import Viewer

When in SfePy source directory, try:
>>> pb, vec, data = pde_solve('examples/diffusion/poisson.py')
>>> view = Viewer(pb.get_output_name())
>>> view()

When in another directory (and SfePy is installed), try:
>>> from sfepy import data_dir
>>> pb, vec, data = pde_solve(data_dir + '/examples/diffusion/poisson.py')
>>> view = Viewer(pb.get_output_name())
>>> view()

Documentation can be found at http://sfepy.org
"""

no_ipython = """\
Couldn't locate IPython. Having IPython installed is greatly recommended. See
http://ipython.scipy.org for more details. You can try to install the 'ipython'
package and start isfepy again.
"""

usage = 'usage: isfepy [options] -- [ipython options]'
help = {
    'console' :
    'select type of interactive session: ipython | python [default: %default]',
    'quiet' :
    'print only version information at startup',
    'silent' :
    'silence the messages printed on screen',
    'no_viewer' :
    'do not attempt to import Viewer',
    'no_wx' :
    'do not try using the threaded Wx ipython shell',
}


def main():
    py_version = "%d.%d.%d" % sys.version_info[:3]

    parser = OptionParser(usage=usage, version="%prog " + sfepy.__version__)
    parser.add_option('-c', '--console', dest='console', action='store',
                      default='ipython', help=help['console'])
    parser.add_option('-q', '--quiet', dest='quiet', action='store_true',
                      default=False, help=help['quiet'])
    parser.add_option('-s', '--silent', dest='silent', action='store_true',
                      default=False, help=help['silent'])
    parser.add_option('', '--no-viewer', dest='is_viewer', action='store_false',
                      default=True, help=help['no_viewer'])
    parser.add_option('', '--no-wx', dest='is_wx', action='store_false',
                      default=True, help=help['no_wx'])
    options, ipy_args = parser.parse_args()

    session = options.console.lower()

    args = {
        'argv'   : ipy_args,
        'silent' : options.silent,
        'is_viewer' : options.is_viewer,
        'is_wx' : options.is_wx,
    }
    if not options.quiet:
        args['message'] = startup_message

    try:
        init_session(session, **args)
    except ValueError:
        try:
            init_session('ipython', **args)
        except ImportError:
            print no_ipython
            init_session('python', **args)

if __name__ == "__main__":
    main()
