# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _fem
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


PRINTF64 = _fem.PRINTF64
SCANF64 = _fem.SCANF64
SCANI16 = _fem.SCANI16
TYPE_Char = _fem.TYPE_Char
TYPE_UChar = _fem.TYPE_UChar
TYPE_Int16 = _fem.TYPE_Int16
TYPE_UInt16 = _fem.TYPE_UInt16
TYPE_Int32 = _fem.TYPE_Int32
TYPE_UInt32 = _fem.TYPE_UInt32
TYPE_Float32 = _fem.TYPE_Float32
TYPE_Float64 = _fem.TYPE_Float64

def errclear(*args):
  """errclear()"""
  return _fem.errclear(*args)

def mem_checkIntegrity(*args):
  """mem_checkIntegrity(int lineNo, char funName, char fileName, char dirName)"""
  return _fem.mem_checkIntegrity(*args)

def mem_statistics(*args):
  """mem_statistics(int lineNo, char funName, char fileName, char dirName)"""
  return _fem.mem_statistics(*args)

def mem_print(*args):
  """mem_print(FILE file, int32 mode) -> int32"""
  return _fem.mem_print(*args)

def mem_printSome(*args):
  """mem_printSome(FILE file, int32 mode, int32 num) -> int32"""
  return _fem.mem_printSome(*args)

def mem_freeGarbage(*args):
  """mem_freeGarbage() -> int32"""
  return _fem.mem_freeGarbage(*args)

def sys_pause(*args):
  """sys_pause()"""
  return _fem.sys_pause(*args)
__FUNC__ = _fem.__FUNC__

def f_checkMemoryIntegrity(*args):
  """f_checkMemoryIntegrity()"""
  return _fem.f_checkMemoryIntegrity(*args)

def f_printMemStats(*args):
  """f_printMemStats()"""
  return _fem.f_printMemStats(*args)

def assembleVector(*args):
  """
    assembleVector(FMField vec, FMField vecInEls, int32 iels, float64 sign, 
        int32 conn) -> int32
    """
  return _fem.assembleVector(*args)

def assembleMatrix(*args):
  """
    assembleMatrix(FMField mtx, int32 prows, int32 cols, FMField mtxInEls, 
        int32 iels, float64 sign, int32 connR, int32 connC) -> int32
    """
  return _fem.assembleMatrix(*args)

def rawGraph(*args):
  """
    rawGraph(int32 p_nRow, int32 p_nnz, int32 nRow, int32 nCol, 
        int32 nGr, int32 nElR, int32 nElC) -> int32
    """
  return _fem.rawGraph(*args)


