# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _geometry
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


PRINTF64 = _geometry.PRINTF64
SCANF64 = _geometry.SCANF64
SCANI16 = _geometry.SCANI16
TYPE_Char = _geometry.TYPE_Char
TYPE_UChar = _geometry.TYPE_UChar
TYPE_Int16 = _geometry.TYPE_Int16
TYPE_UInt16 = _geometry.TYPE_UInt16
TYPE_Int32 = _geometry.TYPE_Int32
TYPE_UInt32 = _geometry.TYPE_UInt32
TYPE_Float32 = _geometry.TYPE_Float32
TYPE_Float64 = _geometry.TYPE_Float64

def errclear(*args):
  """errclear()"""
  return _geometry.errclear(*args)

def mem_checkIntegrity(*args):
  """mem_checkIntegrity(int lineNo, char funName, char fileName, char dirName)"""
  return _geometry.mem_checkIntegrity(*args)

def mem_statistics(*args):
  """mem_statistics(int lineNo, char funName, char fileName, char dirName)"""
  return _geometry.mem_statistics(*args)

def mem_print(*args):
  """mem_print(FILE file, int32 mode) -> int32"""
  return _geometry.mem_print(*args)

def mem_printSome(*args):
  """mem_printSome(FILE file, int32 mode, int32 num) -> int32"""
  return _geometry.mem_printSome(*args)

def mem_freeGarbage(*args):
  """mem_freeGarbage() -> int32"""
  return _geometry.mem_freeGarbage(*args)

def sys_pause(*args):
  """sys_pause()"""
  return _geometry.sys_pause(*args)
__FUNC__ = _geometry.__FUNC__

def f_checkMemoryIntegrity(*args):
  """f_checkMemoryIntegrity()"""
  return _geometry.f_checkMemoryIntegrity(*args)

def f_printMemStats(*args):
  """f_printMemStats()"""
  return _geometry.f_printMemStats(*args)
GM_Material = _geometry.GM_Material
GM_Spatial = _geometry.GM_Spatial
class VolumeGeometry(_object):
    """Proxy of C VolumeGeometry struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VolumeGeometry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VolumeGeometry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mode"] = _geometry.VolumeGeometry_mode_set
    __swig_getmethods__["mode"] = _geometry.VolumeGeometry_mode_get
    if _newclass:mode = _swig_property(_geometry.VolumeGeometry_mode_get, _geometry.VolumeGeometry_mode_set)
    __swig_setmethods__["nEl"] = _geometry.VolumeGeometry_nEl_set
    __swig_getmethods__["nEl"] = _geometry.VolumeGeometry_nEl_get
    if _newclass:nEl = _swig_property(_geometry.VolumeGeometry_nEl_get, _geometry.VolumeGeometry_nEl_set)
    __swig_setmethods__["nQP"] = _geometry.VolumeGeometry_nQP_set
    __swig_getmethods__["nQP"] = _geometry.VolumeGeometry_nQP_get
    if _newclass:nQP = _swig_property(_geometry.VolumeGeometry_nQP_get, _geometry.VolumeGeometry_nQP_set)
    __swig_setmethods__["dim"] = _geometry.VolumeGeometry_dim_set
    __swig_getmethods__["dim"] = _geometry.VolumeGeometry_dim_get
    if _newclass:dim = _swig_property(_geometry.VolumeGeometry_dim_get, _geometry.VolumeGeometry_dim_set)
    __swig_setmethods__["nEP"] = _geometry.VolumeGeometry_nEP_set
    __swig_getmethods__["nEP"] = _geometry.VolumeGeometry_nEP_get
    if _newclass:nEP = _swig_property(_geometry.VolumeGeometry_nEP_get, _geometry.VolumeGeometry_nEP_set)
    __swig_setmethods__["bfGM"] = _geometry.VolumeGeometry_bfGM_set
    __swig_getmethods__["bfGM"] = _geometry.VolumeGeometry_bfGM_get
    if _newclass:bfGM = _swig_property(_geometry.VolumeGeometry_bfGM_get, _geometry.VolumeGeometry_bfGM_set)
    __swig_setmethods__["det"] = _geometry.VolumeGeometry_det_set
    __swig_getmethods__["det"] = _geometry.VolumeGeometry_det_get
    if _newclass:det = _swig_property(_geometry.VolumeGeometry_det_get, _geometry.VolumeGeometry_det_set)
    __swig_setmethods__["volume"] = _geometry.VolumeGeometry_volume_set
    __swig_getmethods__["volume"] = _geometry.VolumeGeometry_volume_get
    if _newclass:volume = _swig_property(_geometry.VolumeGeometry_volume_get, _geometry.VolumeGeometry_volume_set)
    __swig_setmethods__["totalVolume"] = _geometry.VolumeGeometry_totalVolume_set
    __swig_getmethods__["totalVolume"] = _geometry.VolumeGeometry_totalVolume_get
    if _newclass:totalVolume = _swig_property(_geometry.VolumeGeometry_totalVolume_get, _geometry.VolumeGeometry_totalVolume_set)
    def __init__(self, *args): 
        """__init__(self, int32 nEl, int32 nQP, int32 dim, int32 nEP) -> VolumeGeometry"""
        this = _geometry.new_VolumeGeometry(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geometry.delete_VolumeGeometry
    __del__ = lambda self : None;
    def __str__(*args):
        """__str__(self) -> char"""
        return _geometry.VolumeGeometry___str__(*args)

    def str(*args):
        """str(self, FILE file, int32 mode) -> int32"""
        return _geometry.VolumeGeometry_str(*args)

    def describe(*args):
        """describe(self, float64 coorIn, int32 conn, FMField bfGR, FMField weight) -> int32"""
        return _geometry.VolumeGeometry_describe(*args)

    def variable(*args):
        """variable(self, int32 which) -> PyObject"""
        return _geometry.VolumeGeometry_variable(*args)

    def integrate(*args):
        """integrate(self, FMField out, FMField in) -> int32"""
        return _geometry.VolumeGeometry_integrate(*args)

    def integrateChunk(*args):
        """integrateChunk(self, FMField out, FMField in, int32 elList) -> int32"""
        return _geometry.VolumeGeometry_integrateChunk(*args)

    def getElementDiameters(*args):
        """
        getElementDiameters(self, FMField out, int32 edges, float64 coorIn, int32 conn, 
            int32 elList, int32 mode) -> int32
        """
        return _geometry.VolumeGeometry_getElementDiameters(*args)

VolumeGeometry_swigregister = _geometry.VolumeGeometry_swigregister
VolumeGeometry_swigregister(VolumeGeometry)

class SurfaceGeometry(_object):
    """Proxy of C SurfaceGeometry struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SurfaceGeometry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SurfaceGeometry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mode"] = _geometry.SurfaceGeometry_mode_set
    __swig_getmethods__["mode"] = _geometry.SurfaceGeometry_mode_get
    if _newclass:mode = _swig_property(_geometry.SurfaceGeometry_mode_get, _geometry.SurfaceGeometry_mode_set)
    __swig_setmethods__["nFa"] = _geometry.SurfaceGeometry_nFa_set
    __swig_getmethods__["nFa"] = _geometry.SurfaceGeometry_nFa_get
    if _newclass:nFa = _swig_property(_geometry.SurfaceGeometry_nFa_get, _geometry.SurfaceGeometry_nFa_set)
    __swig_setmethods__["nQP"] = _geometry.SurfaceGeometry_nQP_set
    __swig_getmethods__["nQP"] = _geometry.SurfaceGeometry_nQP_get
    if _newclass:nQP = _swig_property(_geometry.SurfaceGeometry_nQP_get, _geometry.SurfaceGeometry_nQP_set)
    __swig_setmethods__["dim"] = _geometry.SurfaceGeometry_dim_set
    __swig_getmethods__["dim"] = _geometry.SurfaceGeometry_dim_get
    if _newclass:dim = _swig_property(_geometry.SurfaceGeometry_dim_get, _geometry.SurfaceGeometry_dim_set)
    __swig_setmethods__["nFP"] = _geometry.SurfaceGeometry_nFP_set
    __swig_getmethods__["nFP"] = _geometry.SurfaceGeometry_nFP_get
    if _newclass:nFP = _swig_property(_geometry.SurfaceGeometry_nFP_get, _geometry.SurfaceGeometry_nFP_set)
    __swig_setmethods__["normal"] = _geometry.SurfaceGeometry_normal_set
    __swig_getmethods__["normal"] = _geometry.SurfaceGeometry_normal_get
    if _newclass:normal = _swig_property(_geometry.SurfaceGeometry_normal_get, _geometry.SurfaceGeometry_normal_set)
    __swig_setmethods__["det"] = _geometry.SurfaceGeometry_det_set
    __swig_getmethods__["det"] = _geometry.SurfaceGeometry_det_get
    if _newclass:det = _swig_property(_geometry.SurfaceGeometry_det_get, _geometry.SurfaceGeometry_det_set)
    __swig_setmethods__["bfBGM"] = _geometry.SurfaceGeometry_bfBGM_set
    __swig_getmethods__["bfBGM"] = _geometry.SurfaceGeometry_bfBGM_get
    if _newclass:bfBGM = _swig_property(_geometry.SurfaceGeometry_bfBGM_get, _geometry.SurfaceGeometry_bfBGM_set)
    __swig_setmethods__["area"] = _geometry.SurfaceGeometry_area_set
    __swig_getmethods__["area"] = _geometry.SurfaceGeometry_area_get
    if _newclass:area = _swig_property(_geometry.SurfaceGeometry_area_get, _geometry.SurfaceGeometry_area_set)
    __swig_setmethods__["totalArea"] = _geometry.SurfaceGeometry_totalArea_set
    __swig_getmethods__["totalArea"] = _geometry.SurfaceGeometry_totalArea_get
    if _newclass:totalArea = _swig_property(_geometry.SurfaceGeometry_totalArea_get, _geometry.SurfaceGeometry_totalArea_set)
    def __init__(self, *args): 
        """__init__(self, int32 nFa, int32 nQP, int32 dim, int32 nFP) -> SurfaceGeometry"""
        this = _geometry.new_SurfaceGeometry(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geometry.delete_SurfaceGeometry
    __del__ = lambda self : None;
    def allocExtraData(*args):
        """allocExtraData(self, int32 nEP) -> int32"""
        return _geometry.SurfaceGeometry_allocExtraData(*args)

    def __str__(*args):
        """__str__(self) -> char"""
        return _geometry.SurfaceGeometry___str__(*args)

    def str(*args):
        """str(self, FILE file, int32 mode) -> int32"""
        return _geometry.SurfaceGeometry_str(*args)

    def describe(*args):
        """describe(self, float64 coorIn, int32 fconn, FMField bfGR, FMField weight) -> int32"""
        return _geometry.SurfaceGeometry_describe(*args)

    def variable(*args):
        """variable(self, int32 which) -> PyObject"""
        return _geometry.SurfaceGeometry_variable(*args)

    def integrate(*args):
        """integrate(self, FMField out, FMField in) -> int32"""
        return _geometry.SurfaceGeometry_integrate(*args)

    def integrateChunk(*args):
        """integrateChunk(self, FMField out, FMField in, int32 elList) -> int32"""
        return _geometry.SurfaceGeometry_integrateChunk(*args)

    def evaluateBFBGM(*args):
        """evaluateBFBGM(self, FMField bfBGR, float64 coorIn, int32 fis, int32 conn) -> int32"""
        return _geometry.SurfaceGeometry_evaluateBFBGM(*args)

SurfaceGeometry_swigregister = _geometry.SurfaceGeometry_swigregister
SurfaceGeometry_swigregister(SurfaceGeometry)



