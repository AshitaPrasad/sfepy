# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _terms
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


PRINTF64 = _terms.PRINTF64
SCANF64 = _terms.SCANF64
SCANI16 = _terms.SCANI16
TYPE_Char = _terms.TYPE_Char
TYPE_UChar = _terms.TYPE_UChar
TYPE_Int16 = _terms.TYPE_Int16
TYPE_UInt16 = _terms.TYPE_UInt16
TYPE_Int32 = _terms.TYPE_Int32
TYPE_UInt32 = _terms.TYPE_UInt32
TYPE_Float32 = _terms.TYPE_Float32
TYPE_Float64 = _terms.TYPE_Float64

def errclear(*args):
  """errclear()"""
  return _terms.errclear(*args)

def mem_checkIntegrity(*args):
  """mem_checkIntegrity(int lineNo, char funName, char fileName, char dirName)"""
  return _terms.mem_checkIntegrity(*args)

def mem_statistics(*args):
  """mem_statistics(int lineNo, char funName, char fileName, char dirName)"""
  return _terms.mem_statistics(*args)

def mem_print(*args):
  """mem_print(FILE file, int32 mode) -> int32"""
  return _terms.mem_print(*args)

def mem_printSome(*args):
  """mem_printSome(FILE file, int32 mode, int32 num) -> int32"""
  return _terms.mem_printSome(*args)

def mem_freeGarbage(*args):
  """mem_freeGarbage() -> int32"""
  return _terms.mem_freeGarbage(*args)

def sys_pause(*args):
  """sys_pause()"""
  return _terms.sys_pause(*args)
__FUNC__ = _terms.__FUNC__

def f_checkMemoryIntegrity(*args):
  """f_checkMemoryIntegrity()"""
  return _terms.f_checkMemoryIntegrity(*args)

def f_printMemStats(*args):
  """f_printMemStats()"""
  return _terms.f_printMemStats(*args)

def dq_state_in_qp(*args):
  """
    dq_state_in_qp(FMField out, FMField state, int32 offset, FMField bf, 
        int32 conn) -> int32
    """
  return _terms.dq_state_in_qp(*args)

def dq_grad_scalar(*args):
  """
    dq_grad_scalar(FMField out, FMField state, int32 offset, VolumeGeometry vg, 
        int32 conn) -> int32
    """
  return _terms.dq_grad_scalar(*args)

def dq_div_vector(*args):
  """
    dq_div_vector(FMField out, FMField state, int32 offset, VolumeGeometry vg, 
        int32 conn) -> int32
    """
  return _terms.dq_div_vector(*args)

def term_laplace_asm(*args):
  """
    term_laplace_asm(FMField out, FMField state, int32 offset, float64 coef, 
        VolumeGeometry vg, int32 conn, int32 elList, 
        int32 isDiff) -> int32
    """
  return _terms.term_laplace_asm(*args)

def dw_lin_elasticity(*args):
  """
    dw_lin_elasticity(FMField out, FMField state, int32 offset, float64 lam, 
        float64 mu, VolumeGeometry vg, int32 conn, 
        int32 elList, int32 isDiff) -> int32
    """
  return _terms.dw_lin_elasticity(*args)

def de_cauchy_strain(*args):
  """
    de_cauchy_strain(FMField out, FMField state, int32 offset, VolumeGeometry vg, 
        int32 conn, int32 elList) -> int32
    """
  return _terms.de_cauchy_strain(*args)

def dq_cauchy_strain(*args):
  """
    dq_cauchy_strain(FMField out, FMField state, int32 offset, VolumeGeometry vg, 
        int32 conn) -> int32
    """
  return _terms.dq_cauchy_strain(*args)

def dw_surface_ltr(*args):
  """
    dw_surface_ltr(FMField out, FMField bf, FMField gbf, FMField traction, 
        SurfaceGeometry sg, int32 conn, int32 elList) -> int32
    """
  return _terms.dw_surface_ltr(*args)

def dw_volume_lvf(*args):
  """
    dw_volume_lvf(FMField out, FMField bf, FMField gbf, FMField force, 
        VolumeGeometry vg, int32 conn, int32 elList) -> int32
    """
  return _terms.dw_volume_lvf(*args)

def dw_mass(*args):
  """
    dw_mass(FMField out, float64 coef, FMField state, int32 offset, 
        FMField bf, VolumeGeometry vg, int32 conn, 
        int32 elList, int32 isDiff) -> int32
    """
  return _terms.dw_mass(*args)

def dw_mass_scalar(*args):
  """
    dw_mass_scalar(FMField out, FMField state, int32 offset, FMField bf, 
        VolumeGeometry vg, int32 conn, int32 elList, 
        int32 isDiff) -> int32
    """
  return _terms.dw_mass_scalar(*args)

def dw_mass_scalar_fine_coarse(*args):
  """
    dw_mass_scalar_fine_coarse(FMField out, FMField state, int32 offset, FMField bf, 
        FMField cbfs, VolumeGeometry vg, int32 conn, 
        int32 iemap, int32 elList, int32 isDiff) -> int32
    """
  return _terms.dw_mass_scalar_fine_coarse(*args)

def term_ns_asmDivGrad(*args):
  """
    term_ns_asmDivGrad(FMField out, FMField state, int32 offset, float64 viscosity, 
        VolumeGeometry vg, int32 conn, int32 elList, 
        int32 isDiff) -> int32
    """
  return _terms.term_ns_asmDivGrad(*args)

def term_ns_asmConvect(*args):
  """
    term_ns_asmConvect(FMField out, FMField state, int32 offset, FMField bf, 
        VolumeGeometry vg, int32 conn, int32 elList, 
        int32 isDiff) -> int32
    """
  return _terms.term_ns_asmConvect(*args)

def dw_lin_convect(*args):
  """
    dw_lin_convect(FMField out, FMField stateB, int32 offsetB, FMField stateU, 
        int32 offsetU, FMField bf, VolumeGeometry vg, 
        int32 conn, int32 elList, int32 isDiff) -> int32
    """
  return _terms.dw_lin_convect(*args)

def term_ns_asmDiv(*args):
  """
    term_ns_asmDiv(FMField out, FMField state, int32 offset, FMField bf, 
        VolumeGeometry vg, int32 conn, int32 elList, 
        int32 isDiff) -> int32
    """
  return _terms.term_ns_asmDiv(*args)

def term_ns_asmGrad(*args):
  """
    term_ns_asmGrad(FMField out, FMField state, int32 offset, FMField bf, 
        VolumeGeometry vg, int32 conn, int32 elList, 
        int32 isDiff) -> int32
    """
  return _terms.term_ns_asmGrad(*args)

def dw_st_pspg_p(*args):
  """
    dw_st_pspg_p(FMField out, FMField state, int32 offset, FMField coef, 
        VolumeGeometry vg, int32 conn, int32 elList, 
        int32 isDiff) -> int32
    """
  return _terms.dw_st_pspg_p(*args)

def dw_st_pspg_c(*args):
  """
    dw_st_pspg_c(FMField out, FMField stateB, int32 offsetB, FMField stateU, 
        int32 offsetU, FMField coef, FMField bf_u, 
        VolumeGeometry vg_p, VolumeGeometry vg_u, 
        int32 conn, int32 elList, int32 isDiff) -> int32
    """
  return _terms.dw_st_pspg_c(*args)

def dw_st_supg_p(*args):
  """
    dw_st_supg_p(FMField out, FMField stateB, int32 offsetB, FMField stateP, 
        int32 offsetP, FMField coef, FMField bf_u, 
        VolumeGeometry vg_u, VolumeGeometry vg_p, 
        int32 conn_u, int32 conn_p, int32 elList, 
        int32 isDiff) -> int32
    """
  return _terms.dw_st_supg_p(*args)

def dw_st_supg_c(*args):
  """
    dw_st_supg_c(FMField out, FMField stateB, int32 offsetB, FMField stateU, 
        int32 offsetU, FMField coef, FMField bf, 
        VolumeGeometry vg, int32 conn, int32 elList, 
        int32 isDiff) -> int32
    """
  return _terms.dw_st_supg_c(*args)

def dw_st_grad_div(*args):
  """
    dw_st_grad_div(FMField out, FMField state, int32 offset, float64 gamma, 
        VolumeGeometry vg, int32 conn, int32 elList, 
        int32 isDiff) -> int32
    """
  return _terms.dw_st_grad_div(*args)


